name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v2.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag or input
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"

    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-beta"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"

    - name: Check for pre-release
      id: check-prerelease
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        MANUAL_PRERELEASE="${{ github.event.inputs.prerelease }}"

        if [[ $VERSION =~ -[a-zA-Z] ]] || [[ "$MANUAL_PRERELEASE" == "true" ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "🚧 This is a pre-release"
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "🚀 This is a stable release"
        fi

    - name: Check if tag exists (for workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "❌ Tag $VERSION already exists"
          exit 1
        fi
        echo "✅ Tag $VERSION is available"

  run-tests:
    name: Run Full Test Suite
    needs: validate-release
    uses: ./.github/workflows/ci.yml
    with:
      run-all-tests: true

  build-artifacts:
    name: Build Release Artifacts
    needs: [validate-release, run-tests]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools

    - name: Update version in files
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        CLEAN_VERSION="${VERSION#v}"

        # Update version in setup.py if it exists
        if [ -f setup.py ]; then
          sed -i "s/version=\".*\"/version=\"$CLEAN_VERSION\"/" setup.py
        fi

        # Update version in ssh_manager.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$CLEAN_VERSION\"/" ssh_manager.py || true

        # Update version in ssh_gui.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$CLEAN_VERSION\"/" ssh_gui.py || true

        echo "✅ Updated version to $CLEAN_VERSION"

    - name: Create setup.py
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        CLEAN_VERSION="${VERSION#v}"

        cat > setup.py << EOF
        from setuptools import setup, find_packages
        import os

        # Read README
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()

        # Read requirements
        def read_requirements():
            with open("requirements.txt", "r") as f:
                return [line.strip() for line in f if line.strip() and not line.startswith("#")]

        setup(
            name="ssh-profile-manager",
            version="$CLEAN_VERSION",
            author="SSH Profile Manager Team",
            author_email="zeloras@gmail.com",
            description="A powerful SSH connection manager with GUI and CLI interfaces",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/yourusername/ssh-profile-manager",
            project_urls={
                "Bug Reports": "https://github.com/yourusername/ssh-profile-manager/issues",
                "Source": "https://github.com/yourusername/ssh-profile-manager",
                "Documentation": "https://github.com/yourusername/ssh-profile-manager/blob/main/README.md",
            },
            py_modules=["ssh_manager", "ssh_gui"],
            classifiers=[
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.12",
                "Topic :: System :: Networking",
                "Topic :: System :: Systems Administration",
                "Topic :: Utilities",
                "Environment :: Console",
                "Environment :: Console :: Curses",
            ],
            keywords="ssh, terminal, cli, gui, profile, manager, connection, server, devops",
            python_requires=">=3.8",
            install_requires=[
                # No external dependencies - uses only Python standard library
            ],
            extras_require={
                "dev": [
                    "pytest>=7.4.0",
                    "pytest-cov>=4.1.0",
                    "black>=23.7.0",
                    "flake8>=6.0.0",
                    "mypy>=1.5.0",
                ],
                "test": [
                    "pytest>=7.4.0",
                    "pytest-cov>=4.1.0",
                    "pytest-mock>=3.11.1",
                    "freezegun>=1.2.2",
                ],
            },
            entry_points={
                "console_scripts": [
                    "ssh-manager=ssh_manager:main",
                    "ssh-gui=ssh_gui:main",
                    "sshm=ssh_gui:main",
                    "sshcli=ssh_manager:main",
                ],
            },
            include_package_data=True,
            zip_safe=False,
        )
        EOF

    - name: Build source distribution
      run: python -m build --sdist

    - name: Build wheel distribution
      run: python -m build --wheel

    - name: Check distributions
      run: |
        python -m twine check dist/*
        ls -la dist/

    - name: Create installation archive
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"

        # Create installation package
        mkdir -p release-package
        cp ssh_manager.py ssh_gui.py install.sh release-package/
        cp README.md LICENSE CONTRIBUTING.md release-package/ 2>/dev/null || true

        # Create install script with version
        cat > release-package/VERSION << EOF
        $VERSION
        SSH Profile Manager $VERSION
        Built on $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Commit: ${GITHUB_SHA}
        EOF

        # Create tarball
        tar -czf "ssh-profile-manager-${VERSION}.tar.gz" -C release-package .

        # Create zip file
        cd release-package
        zip -r "../ssh-profile-manager-${VERSION}.zip" .
        cd ..

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          dist/
          ssh-profile-manager-*.tar.gz
          ssh-profile-manager-*.zip

  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"

        # Create release notes
        cat > release-notes.md << EOF
        ## SSH Profile Manager $VERSION

        ### 🚀 What's New

        - Comprehensive test suite with 85%+ code coverage
        - Multi-platform support (Linux, macOS, Windows)
        - Enhanced CLI and GUI interfaces
        - Improved error handling and validation
        - Better Unicode and special character support

        ### 📦 Installation

        #### Quick Install (Recommended)
        \`\`\`bash
        curl -fsSL https://github.com/yourusername/ssh-profile-manager/releases/download/$VERSION/install.sh | bash
        \`\`\`

        #### Manual Install
        1. Download the \`ssh-profile-manager-$VERSION.tar.gz\` file
        2. Extract: \`tar -xzf ssh-profile-manager-$VERSION.tar.gz\`
        3. Run: \`./install.sh\`

        #### Python Package
        \`\`\`bash
        pip install ssh-profile-manager==${VERSION#v}
        \`\`\`

        ### 🛠️ Usage

        #### GUI Interface
        \`\`\`bash
        ssh-gui        # Full interactive interface
        sshm           # Short alias
        \`\`\`

        #### CLI Interface
        \`\`\`bash
        ssh-manager add myserver example.com username
        ssh-manager list
        ssh-manager connect myserver
        \`\`\`

        ### ✅ Tested On

        - Python 3.8, 3.9, 3.10, 3.11, 3.12
        - Ubuntu 20.04+ / Linux
        - macOS 11+
        - Windows 10+

        ### 📋 Full Changelog

        See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

        ### 🐛 Known Issues

        - GUI interface requires terminal with color support
        - Windows: Some Unicode characters may not display correctly in older terminals

        ### 🆘 Support

        - 📖 [Documentation](README.md)
        - 🐛 [Report Issues](https://github.com/yourusername/ssh-profile-manager/issues)
        - 💬 [Discussions](https://github.com/yourusername/ssh-profile-manager/discussions)

        ---

        **Full Changelog**: https://github.com/yourusername/ssh-profile-manager/compare/v1.0.0...$VERSION
        EOF

    - name: Create/Update Tag (for workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: SSH Profile Manager ${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
        files: |
          dist/*
          ssh-profile-manager-*.tar.gz
          ssh-profile-manager-*.zip
        token: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: needs.validate-release.outputs.is-prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/p/ssh-profile-manager

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/

  publish-test-pypi:
    name: Publish to Test PyPI
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: needs.validate-release.outputs.is-prerelease == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/ssh-profile-manager

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        packages_dir: dist/

  update-homebrew:
    name: Update Homebrew Formula
    needs: [validate-release, publish-pypi]
    runs-on: ubuntu-latest
    if: needs.validate-release.outputs.is-prerelease == 'false'

    steps:
    - name: Update Homebrew formula
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "🍺 Homebrew formula update would be triggered here"
        echo "Version: $VERSION"
        # This would typically trigger a separate repository or workflow
        # that maintains the Homebrew formula

  notify-success:
    name: Notify Release Success
    needs: [validate-release, create-release, publish-pypi]
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Success notification
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "🎉 Successfully released SSH Profile Manager $VERSION!"
        echo ""
        echo "📦 Packages published:"
        echo "  - GitHub Release: ✅"
        echo "  - PyPI: ✅"
        echo ""
        echo "🔗 Links:"
        echo "  - Release: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
        echo "  - PyPI: https://pypi.org/project/ssh-profile-manager/"
        echo ""
        echo "📋 Next steps:"
        echo "  - Update documentation if needed"
        echo "  - Announce on social media/forums"
        echo "  - Monitor for issues and feedback"

  notify-failure:
    name: Notify Release Failure
    needs: [validate-release, create-release, publish-pypi]
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Failure notification
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "❌ Release $VERSION failed!"
        echo ""
        echo "🔍 Check the failed jobs above for details"
        echo "🛠️ Common issues:"
        echo "  - PyPI authentication failed"
        echo "  - Build artifacts missing"
        echo "  - Version already exists"
        echo "  - Tests failed"
        echo ""
        echo "💡 Troubleshooting:"
        echo "  1. Check all secrets are configured"
        echo "  2. Verify version number is correct"
        echo "  3. Ensure all tests pass"
        echo "  4. Review build logs for errors"
        exit 1
