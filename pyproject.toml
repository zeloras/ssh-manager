[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ssh-profile-manager"
version = "2.0.0"
authors = [{ name = "SSH Profile Manager Team", email = "zeloras@gmail.com" }]
description = "A powerful SSH connection manager with GUI and CLI interfaces"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Environment :: Console",
    "Environment :: Console :: Curses",
]
keywords = [
    "ssh",
    "terminal",
    "cli",
    "gui",
    "profile",
    "manager",
    "connection",
    "server",
    "devops",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-xdist>=3.3.1",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "coverage[toml]>=7.3.0",
    "freezegun>=1.2.2",
    "parameterized>=0.9.0",
    "pytest-benchmark>=4.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "freezegun>=1.2.2",
    "parameterized>=0.9.0",
]
docs = ["sphinx>=7.1.0", "sphinx-rtd-theme>=1.3.0"]

[project.urls]
Homepage = "https://github.com/yourusername/ssh-profile-manager"
Documentation = "https://github.com/yourusername/ssh-profile-manager/blob/main/README.md"
Repository = "https://github.com/yourusername/ssh-profile-manager"
"Bug Reports" = "https://github.com/yourusername/ssh-profile-manager/issues"
Changelog = "https://github.com/yourusername/ssh-profile-manager/blob/main/CHANGELOG.md"

[project.scripts]
ssh-manager = "ssh_manager:main"
ssh-gui = "ssh_gui:main"
sshm = "ssh_gui:main"
sshcli = "ssh_manager:main"

[tool.setuptools]
py-modules = ["ssh_manager", "ssh_gui"]

[tool.setuptools.packages.find]
where = ["."]
include = ["ssh_manager*", "ssh_gui*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ssh_manager", "ssh_gui"]
skip_glob = ["*/migrations/*"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.4"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=ssh_manager",
    "--cov=ssh_gui",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
    "--durations=10",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "cli: Command line interface tests",
    "gui: GUI interface tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "error::UserWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["ssh_manager", "ssh_gui"]
omit = ["*/tests/*", "*/test_*", "setup.py", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = [
    "B101",
    "B601",
] # Skip assert_used and shell_injection_process for tests

# Flake8 configuration (in setup.cfg format since flake8 doesn't support pyproject.toml yet)
# This would go in setup.cfg or .flake8 file
